// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: batch.go

package db

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const load = `-- name: Load :batchexec
INSERT INTO "stock_item" (sku, total_count, reserved)
VALUES ($1, $2, $3)
ON CONFLICT (sku) DO UPDATE SET total_count = EXCLUDED.total_count,
                                reserved    = EXCLUDED.reserved
`

type LoadBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type LoadParams struct {
	Sku        int64
	TotalCount int32
	Reserved   int32
}

func (q *Queries) Load(ctx context.Context, arg []LoadParams) *LoadBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Sku,
			a.TotalCount,
			a.Reserved,
		}
		batch.Queue(load, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &LoadBatchResults{br, len(arg), false}
}

func (b *LoadBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *LoadBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const updateStockItem = `-- name: UpdateStockItem :batchexec
UPDATE "stock_item"
SET reserved    = $2,
    total_count = $3
WHERE sku = $1
`

type UpdateStockItemBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpdateStockItemParams struct {
	Sku        int64
	Reserved   int32
	TotalCount int32
}

func (q *Queries) UpdateStockItem(ctx context.Context, arg []UpdateStockItemParams) *UpdateStockItemBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Sku,
			a.Reserved,
			a.TotalCount,
		}
		batch.Queue(updateStockItem, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpdateStockItemBatchResults{br, len(arg), false}
}

func (b *UpdateStockItemBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UpdateStockItemBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
