// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"
)

const getStockItemBySKU = `-- name: GetStockItemBySKU :one
SELECT id, sku, total_count, reserved
FROM stock_item
WHERE sku = $1
`

func (q *Queries) GetStockItemBySKU(ctx context.Context, sku int64) (StockItem, error) {
	row := q.db.QueryRow(ctx, getStockItemBySKU, sku)
	var i StockItem
	err := row.Scan(
		&i.ID,
		&i.Sku,
		&i.TotalCount,
		&i.Reserved,
	)
	return i, err
}

const getStockItems = `-- name: GetStockItems :many
SELECT id, sku, total_count, reserved
FROM stock_item
WHERE sku = ANY ($1::bigint[])
`

func (q *Queries) GetStockItems(ctx context.Context, skus []int64) ([]StockItem, error) {
	rows, err := q.db.Query(ctx, getStockItems, skus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StockItem
	for rows.Next() {
		var i StockItem
		if err := rows.Scan(
			&i.ID,
			&i.Sku,
			&i.TotalCount,
			&i.Reserved,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
