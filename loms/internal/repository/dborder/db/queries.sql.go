// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package db

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO "order" (user_id)
VALUES ($1)
RETURNING id, user_id, status
`

func (q *Queries) CreateOrder(ctx context.Context, userID int64) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder, userID)
	var i Order
	err := row.Scan(&i.ID, &i.UserID, &i.Status)
	return i, err
}

const gerByID = `-- name: GerByID :one
SELECT id, user_id, status
FROM "order"
WHERE id = $1
LIMIT 1
`

func (q *Queries) GerByID(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRow(ctx, gerByID, id)
	var i Order
	err := row.Scan(&i.ID, &i.UserID, &i.Status)
	return i, err
}

const getOrderItems = `-- name: GetOrderItems :many
SELECT id, order_id, sku, count
FROM order_item
WHERE order_id = $1
`

func (q *Queries) GetOrderItems(ctx context.Context, orderID int64) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, getOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Sku,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStatus = `-- name: UpdateStatus :exec
UPDATE "order"
SET status = $2
WHERE id = $1
`

type UpdateStatusParams struct {
	ID     int64
	Status OrderStatus
}

func (q *Queries) UpdateStatus(ctx context.Context, arg UpdateStatusParams) error {
	_, err := q.db.Exec(ctx, updateStatus, arg.ID, arg.Status)
	return err
}
