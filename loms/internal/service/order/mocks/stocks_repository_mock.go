// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mocks

//go:generate minimock -i route256.ozon.ru/project/loms/internal/service/order.StocksRepository -o stocks_repository_mock.go -n StocksRepositoryMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"route256.ozon.ru/project/loms/internal/model"
)

// StocksRepositoryMock implements order.StocksRepository
type StocksRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetCurrentStock          func() (sp1 *model.Stock, err error)
	inspectFuncGetCurrentStock   func()
	afterGetCurrentStockCounter  uint64
	beforeGetCurrentStockCounter uint64
	GetCurrentStockMock          mStocksRepositoryMockGetCurrentStock
}

// NewStocksRepositoryMock returns a mock for order.StocksRepository
func NewStocksRepositoryMock(t minimock.Tester) *StocksRepositoryMock {
	m := &StocksRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetCurrentStockMock = mStocksRepositoryMockGetCurrentStock{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mStocksRepositoryMockGetCurrentStock struct {
	mock               *StocksRepositoryMock
	defaultExpectation *StocksRepositoryMockGetCurrentStockExpectation
	expectations       []*StocksRepositoryMockGetCurrentStockExpectation
}

// StocksRepositoryMockGetCurrentStockExpectation specifies expectation struct of the StocksRepository.GetCurrentStock
type StocksRepositoryMockGetCurrentStockExpectation struct {
	mock *StocksRepositoryMock

	results *StocksRepositoryMockGetCurrentStockResults
	Counter uint64
}

// StocksRepositoryMockGetCurrentStockResults contains results of the StocksRepository.GetCurrentStock
type StocksRepositoryMockGetCurrentStockResults struct {
	sp1 *model.Stock
	err error
}

// Expect sets up expected params for StocksRepository.GetCurrentStock
func (mmGetCurrentStock *mStocksRepositoryMockGetCurrentStock) Expect() *mStocksRepositoryMockGetCurrentStock {
	if mmGetCurrentStock.mock.funcGetCurrentStock != nil {
		mmGetCurrentStock.mock.t.Fatalf("StocksRepositoryMock.GetCurrentStock mock is already set by Set")
	}

	if mmGetCurrentStock.defaultExpectation == nil {
		mmGetCurrentStock.defaultExpectation = &StocksRepositoryMockGetCurrentStockExpectation{}
	}

	return mmGetCurrentStock
}

// Inspect accepts an inspector function that has same arguments as the StocksRepository.GetCurrentStock
func (mmGetCurrentStock *mStocksRepositoryMockGetCurrentStock) Inspect(f func()) *mStocksRepositoryMockGetCurrentStock {
	if mmGetCurrentStock.mock.inspectFuncGetCurrentStock != nil {
		mmGetCurrentStock.mock.t.Fatalf("Inspect function is already set for StocksRepositoryMock.GetCurrentStock")
	}

	mmGetCurrentStock.mock.inspectFuncGetCurrentStock = f

	return mmGetCurrentStock
}

// Return sets up results that will be returned by StocksRepository.GetCurrentStock
func (mmGetCurrentStock *mStocksRepositoryMockGetCurrentStock) Return(sp1 *model.Stock, err error) *StocksRepositoryMock {
	if mmGetCurrentStock.mock.funcGetCurrentStock != nil {
		mmGetCurrentStock.mock.t.Fatalf("StocksRepositoryMock.GetCurrentStock mock is already set by Set")
	}

	if mmGetCurrentStock.defaultExpectation == nil {
		mmGetCurrentStock.defaultExpectation = &StocksRepositoryMockGetCurrentStockExpectation{mock: mmGetCurrentStock.mock}
	}
	mmGetCurrentStock.defaultExpectation.results = &StocksRepositoryMockGetCurrentStockResults{sp1, err}
	return mmGetCurrentStock.mock
}

// Set uses given function f to mock the StocksRepository.GetCurrentStock method
func (mmGetCurrentStock *mStocksRepositoryMockGetCurrentStock) Set(f func() (sp1 *model.Stock, err error)) *StocksRepositoryMock {
	if mmGetCurrentStock.defaultExpectation != nil {
		mmGetCurrentStock.mock.t.Fatalf("Default expectation is already set for the StocksRepository.GetCurrentStock method")
	}

	if len(mmGetCurrentStock.expectations) > 0 {
		mmGetCurrentStock.mock.t.Fatalf("Some expectations are already set for the StocksRepository.GetCurrentStock method")
	}

	mmGetCurrentStock.mock.funcGetCurrentStock = f
	return mmGetCurrentStock.mock
}

// GetCurrentStock implements order.StocksRepository
func (mmGetCurrentStock *StocksRepositoryMock) GetCurrentStock() (sp1 *model.Stock, err error) {
	mm_atomic.AddUint64(&mmGetCurrentStock.beforeGetCurrentStockCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCurrentStock.afterGetCurrentStockCounter, 1)

	if mmGetCurrentStock.inspectFuncGetCurrentStock != nil {
		mmGetCurrentStock.inspectFuncGetCurrentStock()
	}

	if mmGetCurrentStock.GetCurrentStockMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCurrentStock.GetCurrentStockMock.defaultExpectation.Counter, 1)

		mm_results := mmGetCurrentStock.GetCurrentStockMock.defaultExpectation.results
		if mm_results == nil {
			mmGetCurrentStock.t.Fatal("No results are set for the StocksRepositoryMock.GetCurrentStock")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmGetCurrentStock.funcGetCurrentStock != nil {
		return mmGetCurrentStock.funcGetCurrentStock()
	}
	mmGetCurrentStock.t.Fatalf("Unexpected call to StocksRepositoryMock.GetCurrentStock.")
	return
}

// GetCurrentStockAfterCounter returns a count of finished StocksRepositoryMock.GetCurrentStock invocations
func (mmGetCurrentStock *StocksRepositoryMock) GetCurrentStockAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCurrentStock.afterGetCurrentStockCounter)
}

// GetCurrentStockBeforeCounter returns a count of StocksRepositoryMock.GetCurrentStock invocations
func (mmGetCurrentStock *StocksRepositoryMock) GetCurrentStockBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCurrentStock.beforeGetCurrentStockCounter)
}

// MinimockGetCurrentStockDone returns true if the count of the GetCurrentStock invocations corresponds
// the number of defined expectations
func (m *StocksRepositoryMock) MinimockGetCurrentStockDone() bool {
	for _, e := range m.GetCurrentStockMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCurrentStockMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCurrentStockCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCurrentStock != nil && mm_atomic.LoadUint64(&m.afterGetCurrentStockCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetCurrentStockInspect logs each unmet expectation
func (m *StocksRepositoryMock) MinimockGetCurrentStockInspect() {
	for _, e := range m.GetCurrentStockMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StocksRepositoryMock.GetCurrentStock")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCurrentStockMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCurrentStockCounter) < 1 {
		m.t.Error("Expected call to StocksRepositoryMock.GetCurrentStock")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCurrentStock != nil && mm_atomic.LoadUint64(&m.afterGetCurrentStockCounter) < 1 {
		m.t.Error("Expected call to StocksRepositoryMock.GetCurrentStock")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StocksRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetCurrentStockInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StocksRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StocksRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetCurrentStockDone()
}
