version: "3.1"
services:
  cart:
    image: cart
    build: ./cart/
    env_file: ./cart/.env
    ports:
      - "8082:8080"

  loms:
    image: loms
    build: ./loms/
    environment:
      PG_MASTER_DSN: "postgresql://postgres:myozon@postgresql-master:5432/postgres"
      PG_SLAVE_DSN: "postgresql://postgres:myozon@postgresql-slave:5432/postgres"
      KAFKA_ADDR: "kafka:9092"
      KAFKA_TOPIC: "loms.order-events"
      JAEGER_ADDR: "http://jaeger:14268"
      JAEGER_SERVICE_NAME: "loms"
      JAEGER_ENVIRONMENT: "development"
    depends_on:
      postgresql-master:
        condition: service_healthy
      postgresql-slave:
        condition: service_healthy
      kafka:
        condition: service_started
    ports:
      - "8080:8080"

  swagger-loms:
    image: swaggerapi/swagger-ui
    ports:
      - "8083:8080"
    volumes:
      - ./loms/internal/pkg/pb/loms/loms.swagger.json:/loms.swagger.json
    environment:
      SWAGGER_JSON: /loms.swagger.json

  prometheus:
    image: prom/prometheus:v2.36.2
    volumes:
      - ./prometheus/:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/config.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"

  jaeger:
    image: jaegertracing/all-in-one:${JAEGER_VERSION:-latest}
    ports:
      - "16686:16686"
      - "4318:4318"

  grafana:
    image: grafana/grafana:6.7.2
    container_name: grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    ports:
      - "3000:3000"

  init_pg_data:
    image: 'gomicro/goose:3.7.0'
    command: "bash -c 'goose up'"
    environment:
      - GOOSE_DRIVER=postgres
      - GOOSE_DBSTRING=postgresql://postgres:myozon@postgresql-master:5432/postgres
      - GOOSE_MIGRATION_DIR=/migrations
    volumes:
      - ./loms/migrations:/migrations
    depends_on:
      postgresql-master:
        condition: service_healthy

  notifier:
    image: notifier
    build: ./notifier/
    deploy:
      replicas: 3
    environment:
      KAFKA_ADDR: "kafka:9092"
      KAFKA_TOPIC: "loms.order-events"
      CONSUMER_GROUP: "notifier"
      JAEGER_ADDR: "http://jaeger:14268"
      JAEGER_SERVICE_NAME: "notifier"
      JAEGER_ENVIRONMENT: "development"
    depends_on:
      kafka:
        condition: service_started

  postgresql-master:
    image: 'docker.io/bitnami/postgresql:16-debian-12'
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRESQL_PGAUDIT_LOG=READ,WRITE
      - POSTGRESQL_LOG_HOSTNAME=true
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_DATABASE=postgres
      - POSTGRESQL_PASSWORD=myozon

  postgresql-slave:
    image: 'docker.io/bitnami/postgresql:16-debian-12'
    ports:
      - '55628:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      postgresql-master:
        condition: service_healthy
    environment:
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_DATABASE=postgres
      - POSTGRESQL_PASSWORD=myozon
      - POSTGRESQL_MASTER_HOST=postgresql-master
      - POSTGRESQL_PGAUDIT_LOG=READ,WRITE
      - POSTGRESQL_LOG_HOSTNAME=true
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_MASTER_PORT_NUMBER=5432

  postgresql-test:
    image: 'docker.io/bitnami/postgresql:16-debian-12'
    ports:
      - '55629:5432'
    environment:
      - POSTGRESQL_USERNAME=test
      - POSTGRESQL_DATABASE=postgres
      - POSTGRESQL_PASSWORD=test

  kafka:
    image: 'bitnami/kafka:3.7-debian-12'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - '8085:8080'
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      DYNAMIC_CONFIG_ENABLED: 'true'

  kafka-init-topics:
    image: confluentinc/cp-kafka:7.2.1
    depends_on:
      - kafka
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
               cub kafka-ready -b kafka:9092 1 30 && \
               kafka-topics --create --topic loms.order-events --partitions 2 --replication-factor 1 --if-not-exists --bootstrap-server kafka:9092'"
