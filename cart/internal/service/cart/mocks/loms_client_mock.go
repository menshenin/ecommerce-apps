// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mocks

//go:generate minimock -i route256.ozon.ru/project/cart/internal/service/cart.LomsClient -o loms_client_mock.go -n LomsClientMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"route256.ozon.ru/project/cart/internal/model"
)

// LomsClientMock implements cart.LomsClient
type LomsClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAvailableCount          func(ctx context.Context, sku model.SKU) (i1 int32, err error)
	inspectFuncAvailableCount   func(ctx context.Context, sku model.SKU)
	afterAvailableCountCounter  uint64
	beforeAvailableCountCounter uint64
	AvailableCountMock          mLomsClientMockAvailableCount

	funcCheckout          func(ctx context.Context, cart *model.Cart) (o1 model.OrderID, err error)
	inspectFuncCheckout   func(ctx context.Context, cart *model.Cart)
	afterCheckoutCounter  uint64
	beforeCheckoutCounter uint64
	CheckoutMock          mLomsClientMockCheckout
}

// NewLomsClientMock returns a mock for cart.LomsClient
func NewLomsClientMock(t minimock.Tester) *LomsClientMock {
	m := &LomsClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AvailableCountMock = mLomsClientMockAvailableCount{mock: m}
	m.AvailableCountMock.callArgs = []*LomsClientMockAvailableCountParams{}

	m.CheckoutMock = mLomsClientMockCheckout{mock: m}
	m.CheckoutMock.callArgs = []*LomsClientMockCheckoutParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mLomsClientMockAvailableCount struct {
	mock               *LomsClientMock
	defaultExpectation *LomsClientMockAvailableCountExpectation
	expectations       []*LomsClientMockAvailableCountExpectation

	callArgs []*LomsClientMockAvailableCountParams
	mutex    sync.RWMutex
}

// LomsClientMockAvailableCountExpectation specifies expectation struct of the LomsClient.AvailableCount
type LomsClientMockAvailableCountExpectation struct {
	mock    *LomsClientMock
	params  *LomsClientMockAvailableCountParams
	results *LomsClientMockAvailableCountResults
	Counter uint64
}

// LomsClientMockAvailableCountParams contains parameters of the LomsClient.AvailableCount
type LomsClientMockAvailableCountParams struct {
	ctx context.Context
	sku model.SKU
}

// LomsClientMockAvailableCountResults contains results of the LomsClient.AvailableCount
type LomsClientMockAvailableCountResults struct {
	i1  int32
	err error
}

// Expect sets up expected params for LomsClient.AvailableCount
func (mmAvailableCount *mLomsClientMockAvailableCount) Expect(ctx context.Context, sku model.SKU) *mLomsClientMockAvailableCount {
	if mmAvailableCount.mock.funcAvailableCount != nil {
		mmAvailableCount.mock.t.Fatalf("LomsClientMock.AvailableCount mock is already set by Set")
	}

	if mmAvailableCount.defaultExpectation == nil {
		mmAvailableCount.defaultExpectation = &LomsClientMockAvailableCountExpectation{}
	}

	mmAvailableCount.defaultExpectation.params = &LomsClientMockAvailableCountParams{ctx, sku}
	for _, e := range mmAvailableCount.expectations {
		if minimock.Equal(e.params, mmAvailableCount.defaultExpectation.params) {
			mmAvailableCount.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAvailableCount.defaultExpectation.params)
		}
	}

	return mmAvailableCount
}

// Inspect accepts an inspector function that has same arguments as the LomsClient.AvailableCount
func (mmAvailableCount *mLomsClientMockAvailableCount) Inspect(f func(ctx context.Context, sku model.SKU)) *mLomsClientMockAvailableCount {
	if mmAvailableCount.mock.inspectFuncAvailableCount != nil {
		mmAvailableCount.mock.t.Fatalf("Inspect function is already set for LomsClientMock.AvailableCount")
	}

	mmAvailableCount.mock.inspectFuncAvailableCount = f

	return mmAvailableCount
}

// Return sets up results that will be returned by LomsClient.AvailableCount
func (mmAvailableCount *mLomsClientMockAvailableCount) Return(i1 int32, err error) *LomsClientMock {
	if mmAvailableCount.mock.funcAvailableCount != nil {
		mmAvailableCount.mock.t.Fatalf("LomsClientMock.AvailableCount mock is already set by Set")
	}

	if mmAvailableCount.defaultExpectation == nil {
		mmAvailableCount.defaultExpectation = &LomsClientMockAvailableCountExpectation{mock: mmAvailableCount.mock}
	}
	mmAvailableCount.defaultExpectation.results = &LomsClientMockAvailableCountResults{i1, err}
	return mmAvailableCount.mock
}

// Set uses given function f to mock the LomsClient.AvailableCount method
func (mmAvailableCount *mLomsClientMockAvailableCount) Set(f func(ctx context.Context, sku model.SKU) (i1 int32, err error)) *LomsClientMock {
	if mmAvailableCount.defaultExpectation != nil {
		mmAvailableCount.mock.t.Fatalf("Default expectation is already set for the LomsClient.AvailableCount method")
	}

	if len(mmAvailableCount.expectations) > 0 {
		mmAvailableCount.mock.t.Fatalf("Some expectations are already set for the LomsClient.AvailableCount method")
	}

	mmAvailableCount.mock.funcAvailableCount = f
	return mmAvailableCount.mock
}

// When sets expectation for the LomsClient.AvailableCount which will trigger the result defined by the following
// Then helper
func (mmAvailableCount *mLomsClientMockAvailableCount) When(ctx context.Context, sku model.SKU) *LomsClientMockAvailableCountExpectation {
	if mmAvailableCount.mock.funcAvailableCount != nil {
		mmAvailableCount.mock.t.Fatalf("LomsClientMock.AvailableCount mock is already set by Set")
	}

	expectation := &LomsClientMockAvailableCountExpectation{
		mock:   mmAvailableCount.mock,
		params: &LomsClientMockAvailableCountParams{ctx, sku},
	}
	mmAvailableCount.expectations = append(mmAvailableCount.expectations, expectation)
	return expectation
}

// Then sets up LomsClient.AvailableCount return parameters for the expectation previously defined by the When method
func (e *LomsClientMockAvailableCountExpectation) Then(i1 int32, err error) *LomsClientMock {
	e.results = &LomsClientMockAvailableCountResults{i1, err}
	return e.mock
}

// AvailableCount implements cart.LomsClient
func (mmAvailableCount *LomsClientMock) AvailableCount(ctx context.Context, sku model.SKU) (i1 int32, err error) {
	mm_atomic.AddUint64(&mmAvailableCount.beforeAvailableCountCounter, 1)
	defer mm_atomic.AddUint64(&mmAvailableCount.afterAvailableCountCounter, 1)

	if mmAvailableCount.inspectFuncAvailableCount != nil {
		mmAvailableCount.inspectFuncAvailableCount(ctx, sku)
	}

	mm_params := LomsClientMockAvailableCountParams{ctx, sku}

	// Record call args
	mmAvailableCount.AvailableCountMock.mutex.Lock()
	mmAvailableCount.AvailableCountMock.callArgs = append(mmAvailableCount.AvailableCountMock.callArgs, &mm_params)
	mmAvailableCount.AvailableCountMock.mutex.Unlock()

	for _, e := range mmAvailableCount.AvailableCountMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmAvailableCount.AvailableCountMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAvailableCount.AvailableCountMock.defaultExpectation.Counter, 1)
		mm_want := mmAvailableCount.AvailableCountMock.defaultExpectation.params
		mm_got := LomsClientMockAvailableCountParams{ctx, sku}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAvailableCount.t.Errorf("LomsClientMock.AvailableCount got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAvailableCount.AvailableCountMock.defaultExpectation.results
		if mm_results == nil {
			mmAvailableCount.t.Fatal("No results are set for the LomsClientMock.AvailableCount")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmAvailableCount.funcAvailableCount != nil {
		return mmAvailableCount.funcAvailableCount(ctx, sku)
	}
	mmAvailableCount.t.Fatalf("Unexpected call to LomsClientMock.AvailableCount. %v %v", ctx, sku)
	return
}

// AvailableCountAfterCounter returns a count of finished LomsClientMock.AvailableCount invocations
func (mmAvailableCount *LomsClientMock) AvailableCountAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAvailableCount.afterAvailableCountCounter)
}

// AvailableCountBeforeCounter returns a count of LomsClientMock.AvailableCount invocations
func (mmAvailableCount *LomsClientMock) AvailableCountBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAvailableCount.beforeAvailableCountCounter)
}

// Calls returns a list of arguments used in each call to LomsClientMock.AvailableCount.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAvailableCount *mLomsClientMockAvailableCount) Calls() []*LomsClientMockAvailableCountParams {
	mmAvailableCount.mutex.RLock()

	argCopy := make([]*LomsClientMockAvailableCountParams, len(mmAvailableCount.callArgs))
	copy(argCopy, mmAvailableCount.callArgs)

	mmAvailableCount.mutex.RUnlock()

	return argCopy
}

// MinimockAvailableCountDone returns true if the count of the AvailableCount invocations corresponds
// the number of defined expectations
func (m *LomsClientMock) MinimockAvailableCountDone() bool {
	for _, e := range m.AvailableCountMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AvailableCountMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAvailableCountCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAvailableCount != nil && mm_atomic.LoadUint64(&m.afterAvailableCountCounter) < 1 {
		return false
	}
	return true
}

// MinimockAvailableCountInspect logs each unmet expectation
func (m *LomsClientMock) MinimockAvailableCountInspect() {
	for _, e := range m.AvailableCountMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsClientMock.AvailableCount with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AvailableCountMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAvailableCountCounter) < 1 {
		if m.AvailableCountMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LomsClientMock.AvailableCount")
		} else {
			m.t.Errorf("Expected call to LomsClientMock.AvailableCount with params: %#v", *m.AvailableCountMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAvailableCount != nil && mm_atomic.LoadUint64(&m.afterAvailableCountCounter) < 1 {
		m.t.Error("Expected call to LomsClientMock.AvailableCount")
	}
}

type mLomsClientMockCheckout struct {
	mock               *LomsClientMock
	defaultExpectation *LomsClientMockCheckoutExpectation
	expectations       []*LomsClientMockCheckoutExpectation

	callArgs []*LomsClientMockCheckoutParams
	mutex    sync.RWMutex
}

// LomsClientMockCheckoutExpectation specifies expectation struct of the LomsClient.Checkout
type LomsClientMockCheckoutExpectation struct {
	mock    *LomsClientMock
	params  *LomsClientMockCheckoutParams
	results *LomsClientMockCheckoutResults
	Counter uint64
}

// LomsClientMockCheckoutParams contains parameters of the LomsClient.Checkout
type LomsClientMockCheckoutParams struct {
	ctx  context.Context
	cart *model.Cart
}

// LomsClientMockCheckoutResults contains results of the LomsClient.Checkout
type LomsClientMockCheckoutResults struct {
	o1  model.OrderID
	err error
}

// Expect sets up expected params for LomsClient.Checkout
func (mmCheckout *mLomsClientMockCheckout) Expect(ctx context.Context, cart *model.Cart) *mLomsClientMockCheckout {
	if mmCheckout.mock.funcCheckout != nil {
		mmCheckout.mock.t.Fatalf("LomsClientMock.Checkout mock is already set by Set")
	}

	if mmCheckout.defaultExpectation == nil {
		mmCheckout.defaultExpectation = &LomsClientMockCheckoutExpectation{}
	}

	mmCheckout.defaultExpectation.params = &LomsClientMockCheckoutParams{ctx, cart}
	for _, e := range mmCheckout.expectations {
		if minimock.Equal(e.params, mmCheckout.defaultExpectation.params) {
			mmCheckout.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCheckout.defaultExpectation.params)
		}
	}

	return mmCheckout
}

// Inspect accepts an inspector function that has same arguments as the LomsClient.Checkout
func (mmCheckout *mLomsClientMockCheckout) Inspect(f func(ctx context.Context, cart *model.Cart)) *mLomsClientMockCheckout {
	if mmCheckout.mock.inspectFuncCheckout != nil {
		mmCheckout.mock.t.Fatalf("Inspect function is already set for LomsClientMock.Checkout")
	}

	mmCheckout.mock.inspectFuncCheckout = f

	return mmCheckout
}

// Return sets up results that will be returned by LomsClient.Checkout
func (mmCheckout *mLomsClientMockCheckout) Return(o1 model.OrderID, err error) *LomsClientMock {
	if mmCheckout.mock.funcCheckout != nil {
		mmCheckout.mock.t.Fatalf("LomsClientMock.Checkout mock is already set by Set")
	}

	if mmCheckout.defaultExpectation == nil {
		mmCheckout.defaultExpectation = &LomsClientMockCheckoutExpectation{mock: mmCheckout.mock}
	}
	mmCheckout.defaultExpectation.results = &LomsClientMockCheckoutResults{o1, err}
	return mmCheckout.mock
}

// Set uses given function f to mock the LomsClient.Checkout method
func (mmCheckout *mLomsClientMockCheckout) Set(f func(ctx context.Context, cart *model.Cart) (o1 model.OrderID, err error)) *LomsClientMock {
	if mmCheckout.defaultExpectation != nil {
		mmCheckout.mock.t.Fatalf("Default expectation is already set for the LomsClient.Checkout method")
	}

	if len(mmCheckout.expectations) > 0 {
		mmCheckout.mock.t.Fatalf("Some expectations are already set for the LomsClient.Checkout method")
	}

	mmCheckout.mock.funcCheckout = f
	return mmCheckout.mock
}

// When sets expectation for the LomsClient.Checkout which will trigger the result defined by the following
// Then helper
func (mmCheckout *mLomsClientMockCheckout) When(ctx context.Context, cart *model.Cart) *LomsClientMockCheckoutExpectation {
	if mmCheckout.mock.funcCheckout != nil {
		mmCheckout.mock.t.Fatalf("LomsClientMock.Checkout mock is already set by Set")
	}

	expectation := &LomsClientMockCheckoutExpectation{
		mock:   mmCheckout.mock,
		params: &LomsClientMockCheckoutParams{ctx, cart},
	}
	mmCheckout.expectations = append(mmCheckout.expectations, expectation)
	return expectation
}

// Then sets up LomsClient.Checkout return parameters for the expectation previously defined by the When method
func (e *LomsClientMockCheckoutExpectation) Then(o1 model.OrderID, err error) *LomsClientMock {
	e.results = &LomsClientMockCheckoutResults{o1, err}
	return e.mock
}

// Checkout implements cart.LomsClient
func (mmCheckout *LomsClientMock) Checkout(ctx context.Context, cart *model.Cart) (o1 model.OrderID, err error) {
	mm_atomic.AddUint64(&mmCheckout.beforeCheckoutCounter, 1)
	defer mm_atomic.AddUint64(&mmCheckout.afterCheckoutCounter, 1)

	if mmCheckout.inspectFuncCheckout != nil {
		mmCheckout.inspectFuncCheckout(ctx, cart)
	}

	mm_params := LomsClientMockCheckoutParams{ctx, cart}

	// Record call args
	mmCheckout.CheckoutMock.mutex.Lock()
	mmCheckout.CheckoutMock.callArgs = append(mmCheckout.CheckoutMock.callArgs, &mm_params)
	mmCheckout.CheckoutMock.mutex.Unlock()

	for _, e := range mmCheckout.CheckoutMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.o1, e.results.err
		}
	}

	if mmCheckout.CheckoutMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCheckout.CheckoutMock.defaultExpectation.Counter, 1)
		mm_want := mmCheckout.CheckoutMock.defaultExpectation.params
		mm_got := LomsClientMockCheckoutParams{ctx, cart}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCheckout.t.Errorf("LomsClientMock.Checkout got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCheckout.CheckoutMock.defaultExpectation.results
		if mm_results == nil {
			mmCheckout.t.Fatal("No results are set for the LomsClientMock.Checkout")
		}
		return (*mm_results).o1, (*mm_results).err
	}
	if mmCheckout.funcCheckout != nil {
		return mmCheckout.funcCheckout(ctx, cart)
	}
	mmCheckout.t.Fatalf("Unexpected call to LomsClientMock.Checkout. %v %v", ctx, cart)
	return
}

// CheckoutAfterCounter returns a count of finished LomsClientMock.Checkout invocations
func (mmCheckout *LomsClientMock) CheckoutAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckout.afterCheckoutCounter)
}

// CheckoutBeforeCounter returns a count of LomsClientMock.Checkout invocations
func (mmCheckout *LomsClientMock) CheckoutBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckout.beforeCheckoutCounter)
}

// Calls returns a list of arguments used in each call to LomsClientMock.Checkout.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCheckout *mLomsClientMockCheckout) Calls() []*LomsClientMockCheckoutParams {
	mmCheckout.mutex.RLock()

	argCopy := make([]*LomsClientMockCheckoutParams, len(mmCheckout.callArgs))
	copy(argCopy, mmCheckout.callArgs)

	mmCheckout.mutex.RUnlock()

	return argCopy
}

// MinimockCheckoutDone returns true if the count of the Checkout invocations corresponds
// the number of defined expectations
func (m *LomsClientMock) MinimockCheckoutDone() bool {
	for _, e := range m.CheckoutMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckoutMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckoutCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckout != nil && mm_atomic.LoadUint64(&m.afterCheckoutCounter) < 1 {
		return false
	}
	return true
}

// MinimockCheckoutInspect logs each unmet expectation
func (m *LomsClientMock) MinimockCheckoutInspect() {
	for _, e := range m.CheckoutMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsClientMock.Checkout with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckoutMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckoutCounter) < 1 {
		if m.CheckoutMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LomsClientMock.Checkout")
		} else {
			m.t.Errorf("Expected call to LomsClientMock.Checkout with params: %#v", *m.CheckoutMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckout != nil && mm_atomic.LoadUint64(&m.afterCheckoutCounter) < 1 {
		m.t.Error("Expected call to LomsClientMock.Checkout")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LomsClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAvailableCountInspect()

			m.MinimockCheckoutInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LomsClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LomsClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAvailableCountDone() &&
		m.MinimockCheckoutDone()
}
