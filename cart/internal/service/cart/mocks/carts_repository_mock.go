// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mocks

//go:generate minimock -i route256.ozon.ru/project/cart/internal/service/cart.CartsRepository -o carts_repository_mock.go -n CartsRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"route256.ozon.ru/project/cart/internal/model"
)

// CartsRepositoryMock implements cart.CartsRepository
type CartsRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreate          func(ctx context.Context, userID model.UserID) (cp1 *model.Cart, err error)
	inspectFuncCreate   func(ctx context.Context, userID model.UserID)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mCartsRepositoryMockCreate

	funcGetByUserID          func(ctx context.Context, userID model.UserID) (cp1 *model.Cart, err error)
	inspectFuncGetByUserID   func(ctx context.Context, userID model.UserID)
	afterGetByUserIDCounter  uint64
	beforeGetByUserIDCounter uint64
	GetByUserIDMock          mCartsRepositoryMockGetByUserID
}

// NewCartsRepositoryMock returns a mock for cart.CartsRepository
func NewCartsRepositoryMock(t minimock.Tester) *CartsRepositoryMock {
	m := &CartsRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mCartsRepositoryMockCreate{mock: m}
	m.CreateMock.callArgs = []*CartsRepositoryMockCreateParams{}

	m.GetByUserIDMock = mCartsRepositoryMockGetByUserID{mock: m}
	m.GetByUserIDMock.callArgs = []*CartsRepositoryMockGetByUserIDParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCartsRepositoryMockCreate struct {
	mock               *CartsRepositoryMock
	defaultExpectation *CartsRepositoryMockCreateExpectation
	expectations       []*CartsRepositoryMockCreateExpectation

	callArgs []*CartsRepositoryMockCreateParams
	mutex    sync.RWMutex
}

// CartsRepositoryMockCreateExpectation specifies expectation struct of the CartsRepository.Create
type CartsRepositoryMockCreateExpectation struct {
	mock    *CartsRepositoryMock
	params  *CartsRepositoryMockCreateParams
	results *CartsRepositoryMockCreateResults
	Counter uint64
}

// CartsRepositoryMockCreateParams contains parameters of the CartsRepository.Create
type CartsRepositoryMockCreateParams struct {
	ctx    context.Context
	userID model.UserID
}

// CartsRepositoryMockCreateResults contains results of the CartsRepository.Create
type CartsRepositoryMockCreateResults struct {
	cp1 *model.Cart
	err error
}

// Expect sets up expected params for CartsRepository.Create
func (mmCreate *mCartsRepositoryMockCreate) Expect(ctx context.Context, userID model.UserID) *mCartsRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("CartsRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &CartsRepositoryMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &CartsRepositoryMockCreateParams{ctx, userID}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the CartsRepository.Create
func (mmCreate *mCartsRepositoryMockCreate) Inspect(f func(ctx context.Context, userID model.UserID)) *mCartsRepositoryMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for CartsRepositoryMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by CartsRepository.Create
func (mmCreate *mCartsRepositoryMockCreate) Return(cp1 *model.Cart, err error) *CartsRepositoryMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("CartsRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &CartsRepositoryMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &CartsRepositoryMockCreateResults{cp1, err}
	return mmCreate.mock
}

// Set uses given function f to mock the CartsRepository.Create method
func (mmCreate *mCartsRepositoryMockCreate) Set(f func(ctx context.Context, userID model.UserID) (cp1 *model.Cart, err error)) *CartsRepositoryMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the CartsRepository.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the CartsRepository.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the CartsRepository.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mCartsRepositoryMockCreate) When(ctx context.Context, userID model.UserID) *CartsRepositoryMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("CartsRepositoryMock.Create mock is already set by Set")
	}

	expectation := &CartsRepositoryMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &CartsRepositoryMockCreateParams{ctx, userID},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up CartsRepository.Create return parameters for the expectation previously defined by the When method
func (e *CartsRepositoryMockCreateExpectation) Then(cp1 *model.Cart, err error) *CartsRepositoryMock {
	e.results = &CartsRepositoryMockCreateResults{cp1, err}
	return e.mock
}

// Create implements cart.CartsRepository
func (mmCreate *CartsRepositoryMock) Create(ctx context.Context, userID model.UserID) (cp1 *model.Cart, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, userID)
	}

	mm_params := CartsRepositoryMockCreateParams{ctx, userID}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := CartsRepositoryMockCreateParams{ctx, userID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("CartsRepositoryMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the CartsRepositoryMock.Create")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, userID)
	}
	mmCreate.t.Fatalf("Unexpected call to CartsRepositoryMock.Create. %v %v", ctx, userID)
	return
}

// CreateAfterCounter returns a count of finished CartsRepositoryMock.Create invocations
func (mmCreate *CartsRepositoryMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of CartsRepositoryMock.Create invocations
func (mmCreate *CartsRepositoryMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to CartsRepositoryMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mCartsRepositoryMockCreate) Calls() []*CartsRepositoryMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*CartsRepositoryMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *CartsRepositoryMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *CartsRepositoryMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartsRepositoryMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CartsRepositoryMock.Create")
		} else {
			m.t.Errorf("Expected call to CartsRepositoryMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to CartsRepositoryMock.Create")
	}
}

type mCartsRepositoryMockGetByUserID struct {
	mock               *CartsRepositoryMock
	defaultExpectation *CartsRepositoryMockGetByUserIDExpectation
	expectations       []*CartsRepositoryMockGetByUserIDExpectation

	callArgs []*CartsRepositoryMockGetByUserIDParams
	mutex    sync.RWMutex
}

// CartsRepositoryMockGetByUserIDExpectation specifies expectation struct of the CartsRepository.GetByUserID
type CartsRepositoryMockGetByUserIDExpectation struct {
	mock    *CartsRepositoryMock
	params  *CartsRepositoryMockGetByUserIDParams
	results *CartsRepositoryMockGetByUserIDResults
	Counter uint64
}

// CartsRepositoryMockGetByUserIDParams contains parameters of the CartsRepository.GetByUserID
type CartsRepositoryMockGetByUserIDParams struct {
	ctx    context.Context
	userID model.UserID
}

// CartsRepositoryMockGetByUserIDResults contains results of the CartsRepository.GetByUserID
type CartsRepositoryMockGetByUserIDResults struct {
	cp1 *model.Cart
	err error
}

// Expect sets up expected params for CartsRepository.GetByUserID
func (mmGetByUserID *mCartsRepositoryMockGetByUserID) Expect(ctx context.Context, userID model.UserID) *mCartsRepositoryMockGetByUserID {
	if mmGetByUserID.mock.funcGetByUserID != nil {
		mmGetByUserID.mock.t.Fatalf("CartsRepositoryMock.GetByUserID mock is already set by Set")
	}

	if mmGetByUserID.defaultExpectation == nil {
		mmGetByUserID.defaultExpectation = &CartsRepositoryMockGetByUserIDExpectation{}
	}

	mmGetByUserID.defaultExpectation.params = &CartsRepositoryMockGetByUserIDParams{ctx, userID}
	for _, e := range mmGetByUserID.expectations {
		if minimock.Equal(e.params, mmGetByUserID.defaultExpectation.params) {
			mmGetByUserID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetByUserID.defaultExpectation.params)
		}
	}

	return mmGetByUserID
}

// Inspect accepts an inspector function that has same arguments as the CartsRepository.GetByUserID
func (mmGetByUserID *mCartsRepositoryMockGetByUserID) Inspect(f func(ctx context.Context, userID model.UserID)) *mCartsRepositoryMockGetByUserID {
	if mmGetByUserID.mock.inspectFuncGetByUserID != nil {
		mmGetByUserID.mock.t.Fatalf("Inspect function is already set for CartsRepositoryMock.GetByUserID")
	}

	mmGetByUserID.mock.inspectFuncGetByUserID = f

	return mmGetByUserID
}

// Return sets up results that will be returned by CartsRepository.GetByUserID
func (mmGetByUserID *mCartsRepositoryMockGetByUserID) Return(cp1 *model.Cart, err error) *CartsRepositoryMock {
	if mmGetByUserID.mock.funcGetByUserID != nil {
		mmGetByUserID.mock.t.Fatalf("CartsRepositoryMock.GetByUserID mock is already set by Set")
	}

	if mmGetByUserID.defaultExpectation == nil {
		mmGetByUserID.defaultExpectation = &CartsRepositoryMockGetByUserIDExpectation{mock: mmGetByUserID.mock}
	}
	mmGetByUserID.defaultExpectation.results = &CartsRepositoryMockGetByUserIDResults{cp1, err}
	return mmGetByUserID.mock
}

// Set uses given function f to mock the CartsRepository.GetByUserID method
func (mmGetByUserID *mCartsRepositoryMockGetByUserID) Set(f func(ctx context.Context, userID model.UserID) (cp1 *model.Cart, err error)) *CartsRepositoryMock {
	if mmGetByUserID.defaultExpectation != nil {
		mmGetByUserID.mock.t.Fatalf("Default expectation is already set for the CartsRepository.GetByUserID method")
	}

	if len(mmGetByUserID.expectations) > 0 {
		mmGetByUserID.mock.t.Fatalf("Some expectations are already set for the CartsRepository.GetByUserID method")
	}

	mmGetByUserID.mock.funcGetByUserID = f
	return mmGetByUserID.mock
}

// When sets expectation for the CartsRepository.GetByUserID which will trigger the result defined by the following
// Then helper
func (mmGetByUserID *mCartsRepositoryMockGetByUserID) When(ctx context.Context, userID model.UserID) *CartsRepositoryMockGetByUserIDExpectation {
	if mmGetByUserID.mock.funcGetByUserID != nil {
		mmGetByUserID.mock.t.Fatalf("CartsRepositoryMock.GetByUserID mock is already set by Set")
	}

	expectation := &CartsRepositoryMockGetByUserIDExpectation{
		mock:   mmGetByUserID.mock,
		params: &CartsRepositoryMockGetByUserIDParams{ctx, userID},
	}
	mmGetByUserID.expectations = append(mmGetByUserID.expectations, expectation)
	return expectation
}

// Then sets up CartsRepository.GetByUserID return parameters for the expectation previously defined by the When method
func (e *CartsRepositoryMockGetByUserIDExpectation) Then(cp1 *model.Cart, err error) *CartsRepositoryMock {
	e.results = &CartsRepositoryMockGetByUserIDResults{cp1, err}
	return e.mock
}

// GetByUserID implements cart.CartsRepository
func (mmGetByUserID *CartsRepositoryMock) GetByUserID(ctx context.Context, userID model.UserID) (cp1 *model.Cart, err error) {
	mm_atomic.AddUint64(&mmGetByUserID.beforeGetByUserIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetByUserID.afterGetByUserIDCounter, 1)

	if mmGetByUserID.inspectFuncGetByUserID != nil {
		mmGetByUserID.inspectFuncGetByUserID(ctx, userID)
	}

	mm_params := CartsRepositoryMockGetByUserIDParams{ctx, userID}

	// Record call args
	mmGetByUserID.GetByUserIDMock.mutex.Lock()
	mmGetByUserID.GetByUserIDMock.callArgs = append(mmGetByUserID.GetByUserIDMock.callArgs, &mm_params)
	mmGetByUserID.GetByUserIDMock.mutex.Unlock()

	for _, e := range mmGetByUserID.GetByUserIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmGetByUserID.GetByUserIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetByUserID.GetByUserIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetByUserID.GetByUserIDMock.defaultExpectation.params
		mm_got := CartsRepositoryMockGetByUserIDParams{ctx, userID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetByUserID.t.Errorf("CartsRepositoryMock.GetByUserID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetByUserID.GetByUserIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetByUserID.t.Fatal("No results are set for the CartsRepositoryMock.GetByUserID")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmGetByUserID.funcGetByUserID != nil {
		return mmGetByUserID.funcGetByUserID(ctx, userID)
	}
	mmGetByUserID.t.Fatalf("Unexpected call to CartsRepositoryMock.GetByUserID. %v %v", ctx, userID)
	return
}

// GetByUserIDAfterCounter returns a count of finished CartsRepositoryMock.GetByUserID invocations
func (mmGetByUserID *CartsRepositoryMock) GetByUserIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByUserID.afterGetByUserIDCounter)
}

// GetByUserIDBeforeCounter returns a count of CartsRepositoryMock.GetByUserID invocations
func (mmGetByUserID *CartsRepositoryMock) GetByUserIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByUserID.beforeGetByUserIDCounter)
}

// Calls returns a list of arguments used in each call to CartsRepositoryMock.GetByUserID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetByUserID *mCartsRepositoryMockGetByUserID) Calls() []*CartsRepositoryMockGetByUserIDParams {
	mmGetByUserID.mutex.RLock()

	argCopy := make([]*CartsRepositoryMockGetByUserIDParams, len(mmGetByUserID.callArgs))
	copy(argCopy, mmGetByUserID.callArgs)

	mmGetByUserID.mutex.RUnlock()

	return argCopy
}

// MinimockGetByUserIDDone returns true if the count of the GetByUserID invocations corresponds
// the number of defined expectations
func (m *CartsRepositoryMock) MinimockGetByUserIDDone() bool {
	for _, e := range m.GetByUserIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByUserIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByUserIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByUserID != nil && mm_atomic.LoadUint64(&m.afterGetByUserIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetByUserIDInspect logs each unmet expectation
func (m *CartsRepositoryMock) MinimockGetByUserIDInspect() {
	for _, e := range m.GetByUserIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartsRepositoryMock.GetByUserID with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByUserIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByUserIDCounter) < 1 {
		if m.GetByUserIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CartsRepositoryMock.GetByUserID")
		} else {
			m.t.Errorf("Expected call to CartsRepositoryMock.GetByUserID with params: %#v", *m.GetByUserIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByUserID != nil && mm_atomic.LoadUint64(&m.afterGetByUserIDCounter) < 1 {
		m.t.Error("Expected call to CartsRepositoryMock.GetByUserID")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CartsRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateInspect()

			m.MinimockGetByUserIDInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CartsRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CartsRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockGetByUserIDDone()
}
